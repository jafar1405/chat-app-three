{"version":3,"sources":["Login.js","DisplayConversations.js","MessageBox.js","MessagingPanel.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","react_default","a","createElement","id","onSubmit","e","preventDefault","handleLogin","target","username","value","type","DisplayConversation","messages","map","message","index","key","MessageBox","onKeyDown","keyCode","getMessage","MessagingPanel","state","connection","WebSocket","window","location","origin","replace","console","log","_this","data","onopen","send","JSON","stringify","_this2","this","onmessage","parse","setState","concat","Object","toConsumableArray","Fragment","DisplayConversations","src_MessageBox","React","Component","App","className","src_MessagingPanel","src_Login","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAmBeA,MAjBf,SAAeC,GAMX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACJH,EAAAC,EAAAC,cAAA,QAAME,SANA,SAACC,GACXA,EAAEC,iBACFP,EAAMQ,YAAYF,EAAEG,OAAOC,SAASC,SAK5BV,EAAAC,EAAAC,cAAA,0BAAwBF,EAAAC,EAAAC,cAAA,WACxBF,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOR,GAAG,aAAYH,EAAAC,EAAAC,cAAA,WAClCF,EAAAC,EAAAC,cAAA,UAAQS,KAAK,UAAb,mBCCDC,MAZf,SAA6Bb,GACzB,OACIC,EAAAC,EAAAC,cAAA,WAEQH,EAAMc,SAASC,IAAI,SAACC,EAASC,GAAV,OACfhB,EAAAC,EAAAC,cAAA,OAAKe,IAAKD,GAAV,IAAmBD,EAAQN,SAA3B,MAAwCM,EAAQA,QAAhD,SCWLG,MAhBf,SAAoBnB,GAShB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAUiB,UATF,SAACd,GACI,KAAdA,EAAEe,UACDf,EAAEC,iBACFP,EAAMsB,WAAWhB,EAAEG,OAAOE,OAC1BL,EAAEG,OAAOE,MAAQ,SCsCdY,6MAxCXC,MAAQ,CACJV,SAAS,MAKbW,WAAa,IAAIC,UAAUC,OAAOC,SAASC,OAAOC,QAAQ,QAAS,SAcnER,WAAa,SAACN,GACVe,QAAQC,IAAIC,EAAKjC,OACjB,IAAMkC,EAAO,CACTxB,SAASuB,EAAKjC,MAAMU,SACpBM,QAAQA,GAEZiB,EAAKR,WAAWU,OAAS,WACrBF,EAAKR,WAAWW,KAAKC,KAAKC,UAAUJ,yFAlBzB,IAAAK,EAAAC,KACfT,QAAQC,IAAIQ,KAAKf,YACjBe,KAAKf,WAAWgB,UAAY,SAACzB,GACzBe,QAAQC,IAAIhB,GACZ,IAAMkB,EAAOG,KAAKK,MAAM1B,EAAQkB,MAChCK,EAAKI,SAAS,CACV7B,SAAQ,GAAA8B,OAAAC,OAAAC,EAAA,EAAAD,CAAKN,EAAKf,MAAMV,UAAhB,CAA0BoB,wCAgB1C,OACIjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6C,SAAA,KACI9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAqBlC,SAAU0B,KAAKhB,MAAMV,WAC1Cb,EAAAC,EAAAC,cAAC8C,EAAD,CAAY3B,WAAYkB,KAAKlB,qBApChB4B,IAAMC,WC0BpBC,6MAxBb5B,MAAQ,CACNd,SAAS,QAGXF,YAAc,SAACE,GACbuB,EAAKU,SAAS,CACZjC,SAASA,6EAKX,OACET,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,OAEVb,KAAKhB,MAAMd,SAGVT,EAAAC,EAAAC,cAACmD,EAAD,CAAgB5C,SAAU8B,KAAKhB,MAAMd,WAFrCT,EAAAC,EAAAC,cAACoD,EAAD,CAAO/C,YAAagC,KAAKhC,sBAjBnB0C,IAAMC,WCQJK,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6de5824.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Login(props){\r\n\r\n    const login = (e) => {\r\n        e.preventDefault()\r\n        props.handleLogin(e.target.username.value)\r\n    }\r\n    return(\r\n        <div id=\"login\">\r\n            <form onSubmit={login}>\r\n                <label>User Name</label><br/>\r\n                <input type=\"text\" id=\"username\"/><br/>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nfunction DisplayConversation(props){\r\n    return(\r\n        <div>\r\n            {\r\n                props.messages.map((message, index ) => (\r\n                    <div key={index}> {message.username} : {message.message} </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayConversation;","import React from 'react';\r\n\r\nfunction MessageBox(props){\r\n\r\n    const message = (e) => {\r\n        if(e.keyCode === 13){\r\n            e.preventDefault()\r\n            props.getMessage(e.target.value)\r\n            e.target.value = \"\"\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <textarea onKeyDown={message}></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageBox;","import React from 'react';\r\nimport DisplayConversation from './DisplayConversations';\r\nimport MessageBox from './MessageBox';\r\n\r\nclass MessagingPanel extends React.Component{\r\n\r\n    state = {\r\n        messages:[]\r\n    }\r\n\r\n   \r\n\r\n    connection = new WebSocket(window.location.origin.replace(/^http/, 'ws'))\r\n    \r\n\r\n    componentDidMount(){\r\n        console.log(this.connection)\r\n        this.connection.onmessage = (message) =>{\r\n            console.log(message)\r\n            const data = JSON.parse(message.data)\r\n            this.setState({\r\n                messages:[...this.state.messages, data]\r\n            })\r\n        }\r\n    }\r\n\r\n    getMessage = (message) => {\r\n        console.log(this.props)\r\n        const data = {\r\n            username:this.props.username,\r\n            message:message\r\n        }\r\n        this.connection.onopen = () => {\r\n            this.connection.send(JSON.stringify(data))\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <DisplayConversation messages={this.state.messages}/>\r\n                <MessageBox getMessage={this.getMessage}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessagingPanel;","import React from 'react';\nimport Login from './Login';\nimport MessagingPanel from './MessagingPanel'\n\nclass App extends React.Component{\n\n  state = {\n    username:null\n  }\n\n  handleLogin = (username) => {\n    this.setState({\n      username:username\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {\n          !this.state.username?\n            <Login handleLogin={this.handleLogin}/>\n            :\n            <MessagingPanel username={this.state.username}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}