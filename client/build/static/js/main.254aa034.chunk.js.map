{"version":3,"sources":["Login.js","DisplayConversations.js","MessageBox.js","MessagingPanel.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","react_default","a","createElement","className","onSubmit","e","preventDefault","handleLogin","target","username","value","type","id","placeholder","required","DisplayConversation","_this","this","messages","map","message","index","key","ref","messagesEnd","React","Component","MessageBox","onKeyDown","keyCode","getMessage","aria-hidden","MessagingPanel","state","sound","Audio","playSound","cloneNode","play","connection","WebSocket","window","location","origin","replace","data","send","JSON","stringify","_this2","preload","load","onmessage","parse","setState","concat","Object","toConsumableArray","DisplayConversations","src_MessageBox","App","Fragment","src_MessagingPanel_0","src_Login","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPA+BeA,MA5Bf,SAAeC,GAMX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,SANxB,SAACC,GACXA,EAAEC,iBACFP,EAAMQ,YAAYF,EAAEG,OAAOC,SAASC,SAM5BV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0CAAd,WACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WAAjB,iBACAH,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,GAAG,WAAYT,UAAU,eAAeU,YAAY,iBAAiBC,SAAS,KAQjGd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mCAAmCQ,KAAK,UAA1D,WACAX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oCAAb,4BC6BDY,mLAvCH,IAAAC,EAAAC,KACJ,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEPc,KAAKlB,MAAMmB,SAASC,IAAI,SAACC,EAASC,GAC9B,OAAGL,EAAKjB,MAAMU,WAAaW,EAAQX,SAE3BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAemB,IAAKD,GAI/BrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIkB,EAAQX,UAAf,IAA6BT,EAAAC,EAAAC,cAAA,WAAMkB,EAAQA,YAQvDpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAgBmB,IAAKD,GAChCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIkB,EAAQX,UAAf,MAA+BT,EAAAC,EAAAC,cAAA,WAAMkB,EAAQA,aAQrEpB,EAAAC,EAAAC,cAAA,OAAKqB,IAAKN,KAAKO,sBA5CGC,IAAMC,WCuBzBC,MAvBf,SAAoB5B,GAShB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEfH,EAAAC,EAAAC,cAAA,SAAO0B,UAZX,SAACvB,GACI,KAAdA,EAAEwB,UACDxB,EAAEC,iBACFP,EAAM+B,WAAWzB,EAAEG,OAAOE,OAC1BL,EAAEG,OAAOE,MAAQ,KAQsBC,KAAK,OAAOR,UAAU,YAAYU,YAAY,mBACzEb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeQ,KAAK,UAASX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsB4B,cAAY,cCoCvGC,oNA9CXC,MAAQ,CACJf,SAAS,MAGbgB,MAAQ,IAAIC,MAAM,wBAElBC,UAAY,WACEpB,EAAKkB,MAAMG,YACfC,UAGXC,WAAa,IAAIC,UAAUC,OAAOC,SAASC,OAAOC,QAAQ,QAAS,SAgBlEd,WAAa,SAACV,GACV,IAAMyB,EAAO,CACTpC,SAASO,EAAKjB,MAAMU,SACpBW,QAAQA,GAEZJ,EAAKuB,WAAWO,KAAKC,KAAKC,UAAUH,wFAlBrB,IAAAI,EAAAhC,KACfA,KAAKiB,MAAMgB,QAAU,OACrBjC,KAAKiB,MAAMiB,OACXlC,KAAKsB,WAAWa,UAAY,SAAChC,GACzB6B,EAAKb,YACL,IAAMS,EAAOE,KAAKM,MAAMjC,EAAQyB,MAEhCI,EAAKK,SAAS,CACVpC,SAAQ,GAAAqC,OAAAC,OAAAC,EAAA,EAAAD,CAAKP,EAAKhB,MAAMf,UAAhB,CAA0B2B,wCAe1C,OACI7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACwD,EAAD,CAAqBxC,SAAUD,KAAKgB,MAAMf,SAAUT,SAAUQ,KAAKlB,MAAMU,WACzET,EAAAC,EAAAC,cAACyD,EAAD,CAAY7B,WAAYb,KAAKa,qBA1ChBL,IAAMC,YCyBpBkC,6MAxBb3B,MAAQ,CACNxB,SAAS,QAGXF,YAAc,SAACE,GACbO,EAAKsC,SAAS,CACZ7C,SAASA,6EAKX,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4D,SAAA,KAEK5C,KAAKgB,MAAMxB,SAGVT,EAAAC,EAAAC,cAAC4D,EAAD,CAAgBrD,SAAUQ,KAAKgB,MAAMxB,WAFrCT,EAAAC,EAAAC,cAAC6D,EAAD,CAAOxD,YAAaU,KAAKV,sBAjBnBkB,IAAMC,WCQJsC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.254aa034.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Login.css';\r\n\r\nfunction Login(props){\r\n\r\n    const login = (e) => {\r\n        e.preventDefault()\r\n        props.handleLogin(e.target.username.value)\r\n    }\r\n    return(\r\n        <div className=\"signin\">\r\n            <form className=\"form-signin\" onSubmit={login}>\r\n                {/* <img className=\"mb-4\" src=\"https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg\" alt=\"\" width=\"72\" height=\"72\"/> */}\r\n                <h1 className=\"h3 mb-3 font-weight-normal text-center\">Sign In</h1>\r\n                <label className=\"sr-only\">Email address</label>\r\n                <input type=\"text\" id=\"username\"  className=\"form-control\" placeholder=\"Enter You Name\" required=\"\"/>\r\n                {/* <label for=\"inputPassword\" className=\"sr-only\">Password</label>\r\n                <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required=\"\"/>\r\n                <div className=\"checkbox mb-3\">\r\n                    <label>\r\n                    <input type=\"checkbox\" value=\"remember-me\"/> Remember me\r\n                    </label>\r\n                </div> */}\r\n                <br/>\r\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n                <p className=\"mt-5 mb-3 text-muted text-center\">Â© 2018-2019</p>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nclass DisplayConversation extends React.Component{\r\n    \r\n    // messagesEnd = React.createRef()\r\n\r\n    // componentDidMount () {\r\n    //     this.scrollToBottom()\r\n    // }\r\n    // componentDidUpdate () {\r\n    //     this.scrollToBottom()\r\n    // }\r\n    // scrollToBottom = () => {\r\n    //     this.messagesEnd.current.scrollIntoView({ behavior: 'smooth' })\r\n    // }\r\n    render(){\r\n        return(\r\n            <div className=\"msg_history\">\r\n                {\r\n                    this.props.messages.map((message, index ) => {\r\n                        if(this.props.username === message.username){\r\n                            return (\r\n                                <div className=\"incoming_msg\" key={index}>\r\n                                    {/* <div className=\"incoming_msg_img\"> \r\n                                        <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\"/> \r\n                                    </div> */}\r\n                                    <div className=\"received_msg\">\r\n                                        <div className=\"received_withd_msg\">\r\n                                            <p><i>{message.username}</i> <br/>{message.message}</p>\r\n                                            {/* <span className=\"time_date\"> 11:01 AM    |    June 9</span> */}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }else{\r\n                            return(\r\n                                <div className=\"outgoing_msg\"  key={index}>\r\n                                    <div className=\"sent_msg\">\r\n                                        <p><i>{message.username}</i> : <br/>{message.message}</p>\r\n                                        {/* <span className=\"time_date\"> 11:01 AM    |    June 9</span>  */}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                <div ref={this.messagesEnd} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default DisplayConversation;","import React from 'react';\r\n\r\nfunction MessageBox(props){\r\n\r\n    const message = (e) => {\r\n        if(e.keyCode === 13){\r\n            e.preventDefault()\r\n            props.getMessage(e.target.value)\r\n            e.target.value = \"\"\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <div className=\"type_msg\">\r\n                        <div className=\"input_msg_write\">\r\n                        {/* <textarea ></textarea> */}\r\n                        <input onKeyDown={message} type=\"text\" className=\"write_msg\" placeholder=\"Type a message\"/>\r\n                        <button className=\"msg_send_btn\" type=\"button\"><i className=\"fa fa-paper-plane-o\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageBox;","import React from 'react';\r\nimport DisplayConversation from './DisplayConversations';\r\nimport MessageBox from './MessageBox';\r\nimport './MessagingPanel.css';\r\n\r\nclass MessagingPanel extends React.Component{\r\n\r\n    state = {\r\n        messages:[]\r\n    }     \r\n\r\n    sound = new Audio(\"../assets/ping.mp3\")\r\n    \r\n    playSound = () => {\r\n        let click=this.sound.cloneNode();\r\n        click.play();\r\n    }\r\n\r\n   connection = new WebSocket(window.location.origin.replace(/^http/, 'ws'))\r\n   //connection = new WebSocket(\"ws://localhost:5000\")\r\n\r\n    componentDidMount(){\r\n        this.sound.preload = 'auto';\r\n        this.sound.load();\r\n        this.connection.onmessage = (message) =>{\r\n            this.playSound()\r\n            const data = JSON.parse(message.data)\r\n\r\n            this.setState({\r\n                messages:[...this.state.messages, data]\r\n            })\r\n        }\r\n    }\r\n\r\n    getMessage = (message) => {\r\n        const data = {\r\n            username:this.props.username,\r\n            message:message\r\n        }\r\n        this.connection.send(JSON.stringify(data)) \r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"mesgs\">\r\n                <DisplayConversation messages={this.state.messages} username={this.props.username}/>\r\n                <MessageBox getMessage={this.getMessage}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessagingPanel;","import React from 'react';\nimport Login from './Login';\nimport MessagingPanel from './MessagingPanel'\n\nclass App extends React.Component{\n\n  state = {\n    username:null\n  }\n\n  handleLogin = (username) => {\n    this.setState({\n      username:username\n    })\n  }\n\n  render(){\n    return (\n      <>\n        {\n          !this.state.username?\n            <Login handleLogin={this.handleLogin}/>\n            :\n            <MessagingPanel username={this.state.username}/>\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}